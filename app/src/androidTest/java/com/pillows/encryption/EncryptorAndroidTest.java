package com.pillows.encryption;

import android.net.Uri;
import android.support.test.runner.AndroidJUnit4;
import android.util.Log;

import com.pillows.accountsafe.Settings;

import junit.framework.Assert;

import org.apache.commons.io.FileUtils;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.SecureRandom;
import java.util.Arrays;

/**
 * Created by agudz on 31/12/15.
 */
@RunWith(AndroidJUnit4.class)
public class EncryptorAndroidTest {

    private static final String TAG = "AccountSafe";
    private static final String PACKAGE_ID = "com.pillows.accountsafe";
    private static final String CACHE_DIR = "/data/data/" + PACKAGE_ID + "/cache/";

    /**
     * Checks that generated bytes are equals for same base strings.
     */
    @Test
    public void testKeyGeneration() {

        try {
            byte[] b1 = Encryptor.generate256ByteKey("304029450398");
            byte[] b2 = Encryptor.generate256ByteKey("304029450398");
            byte[] b3 = Encryptor.generate256ByteKey("304029450398");
            byte[] b4 = Encryptor.generate256ByteKey("304029450398");

            Assert.assertTrue(Arrays.equals(b1, b2));
            Assert.assertTrue(Arrays.equals(b3, b4));
            Assert.assertTrue(Arrays.equals(b1, b4));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private void copyFile(InputStream in, OutputStream out) throws IOException {
        byte[] buffer = new byte[1024];
        int read;
        while ((read = in.read(buffer)) != -1) {
            out.write(buffer, 0, read);
        }
    }


    /**
     * Test Encryptor
     */
    @Test
    public void testEncryptPasswrod() {
        String pass = "mypassword";
        String key = "201025153020";

        SecureRandom random = new SecureRandom();
        byte[] lard = new byte[Settings.LARD_SIZE];
        random.nextBytes(lard);

        Encryptor enc = new Encryptor(key);

        String passEncrypted = enc.encryptPass(pass, lard);

        Encryptor enc2 = new Encryptor(key);

        String decPassword = enc2.decryptPass(passEncrypted);

        Assert.assertTrue(pass.equals(decPassword));
    }

    /**
     * Test Encryptor
     */
    @Test
    public void testEncryptPasswrodWrongKey() {
        String pass = "mypassword";
        String key = "201025153020";
        String wrongKey = "4132523452345234";

        SecureRandom random = new SecureRandom();
        byte[] lard = new byte[Settings.LARD_SIZE];
        random.nextBytes(lard);

        Encryptor enc = new Encryptor(key);

        String passEncrypted = enc.encryptPass(pass, lard);

        Encryptor enc2 = new Encryptor(wrongKey);

        String decPassword = enc2.decryptPass(passEncrypted);

        Assert.assertNull(decPassword);
    }

}
