package com.pillows.encryption;

import com.pillows.accountsafe.Settings;

import junit.framework.Assert;

import org.apache.commons.io.FileUtils;
import org.hamcrest.core.IsNot;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import static org.mockito.Matchers.anyString;
/**
 * Created by agudz on 31/12/15.
 */


//@RunWith(PowerMockRunner.class)
//@PrepareForTest({ android.util.Log.class })
public class EncryptorTest {

    /*@BeforeClass
    public static void beforeClass() {
        PowerMockito.mockStatic(android.util.Log.class);
        PowerMockito.when(android.util.Log.e(anyString(), anyString()))
                .thenAnswer(new Answer<Void>() {
                    public Void answer(InvocationOnMock invocation) throws Throwable {
                        System.out.println("" + invocation.getArguments()[0] + invocation.getArguments()[1]);
                        return null;
                    }
                });
    }*/

    /*@Test
    public void testLogMock() {
        Log.e("TAG", "MESSage");
    }*/

    /**
     * Checks that generated bytes are equals for same base strings.
     */
    @Test
    public void testKeyGeneration() throws Exception {
        byte[] b1 = Encryptor.generate256ByteKey("304029450398", "SUN");
        byte[] b2 = Encryptor.generate256ByteKey("304029450398", "SUN");
        byte[] b3 = Encryptor.generate256ByteKey("304029450398", "SUN");
        byte[] b4 = Encryptor.generate256ByteKey("304029450398", "SUN");

        Assert.assertTrue(Arrays.equals(b1, b2));
        Assert.assertTrue(Arrays.equals(b3, b4));
        Assert.assertTrue(Arrays.equals(b1, b4));
    }


    /**
     * Test Encryptor
     */
    @Test
    public void testEncryptByteArray() throws IOException {
        Encryptor enc = new Encryptor("201025153020", "SUN");

        Assert.assertNotNull(Settings.WATERMARK);

        byte[] encBytes = enc.encrypt(Settings.WATERMARK);

        Assert.assertNotNull(encBytes);
        Assert.assertFalse(Arrays.equals(encBytes, Settings.WATERMARK));

        Encryptor enc2 = new Encryptor("201025153020", "SUN");

        byte[] decBytes = enc2.decrypt(encBytes);

        Assert.assertFalse(Arrays.equals(encBytes, decBytes));
        Assert.assertTrue(Arrays.equals(Settings.WATERMARK, decBytes));
    }

    /**
     * Test Encryptor
     */
    @Test
    public void testEncryptPasswrod() {
        String pass = "mypassword";
        String key = "201025153020";

        Encryptor enc = new Encryptor(key, "SUN");

        /*byte[] passEncrypted = enc.encryptPass(pass);

        Encryptor enc2 = new Encryptor(key, "SUN");

        String decPassword = enc2.decryptPass(passEncrypted);

        Assert.assertTrue(pass.equals(decPassword));*/
    }
}
